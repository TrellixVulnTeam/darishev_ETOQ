<?php

namespace ContainerUCc2Q4N;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getExecuteCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Dukecity\CommandSchedulerBundle\Command\ExecuteCommand' shared service.
     *
     * @return \Dukecity\CommandSchedulerBundle\Command\ExecuteCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LockableTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/dukecity/command-scheduler-bundle/Command/ExecuteCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/dukecity/command-scheduler-bundle/Service/CommandSchedulerExecution.php';

        $a = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());
        $b = ($container->services['doctrine'] ?? $container->getDoctrineService());

        $container->privates['Dukecity\\CommandSchedulerBundle\\Command\\ExecuteCommand'] = $instance = new \Dukecity\CommandSchedulerBundle\Command\ExecuteCommand(new \Dukecity\CommandSchedulerBundle\Service\CommandSchedulerExecution(($container->services['kernel'] ?? $container->get('kernel', 1)), $container, ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()), $a, $b, 'default', (\dirname(__DIR__, 3).'/log')), $a, $b, 'default', (\dirname(__DIR__, 3).'/log'));

        $instance->setName('scheduler:execute');
        $instance->setDescription('Execute scheduled commands');

        return $instance;
    }
}
